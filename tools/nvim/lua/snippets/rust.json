{
  "AtCoder Prelude": {
    "prefix": "prelude",
    "body": [
      "#[allow(unused_imports)]",
      "use proconio::{",
      "    fastout, input, input_interactive,",
      "    marker::{Bytes, Chars, Isize1, Usize1},",
      "    source::line::LineSource,",
      "};",
      "",
      "#[allow(unused_imports)]",
      "use itertools::Itertools;",
      "",
      "#[allow(unused_imports)]",
      "use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};",
      "",
      "#[allow(unused_imports)]",
      "use std::cmp::{max, min, Ordering};",
      "",
      "#[allow(unused_imports)]",
      "use ac_library::{",
      "    math,",
      "    // crt(r: &[i64], m: &[i64]) -> (i64, i64)",
      "    // floor_sum(n: i64, m: i64, a: i64, b: i64) -> i64",
      "    // inv_mod(x: i64, m: i64) -> i64",
      "    // pow_mod(x: i64, n: i64, m: u32) -> u32",
      "    Dsu,",
      "    // new(size: usize) -> Self",
      "    // merge(&mut self, a: usize, b: usize) -> usize",
      "    // same(&mut self, a: usize, b: usize) -> bool",
      "    // leader(&mut self, a: usize) -> usize",
      "    // size(&self, a: usize) -> usize",
      "    // groups(&self) -> Vec<Vec<usize>>",
      "    FenwickTree,",
      "    // new(n: usize, e: T) -> Self",
      "    // accum(&self, idx: usize) -> T",
      "    // add<U: Clone>(&mut self, idx: usize, val: U)",
      "    // sum<R>(&self, range: R) -> T",
      "    Max,",
      "    SccGraph,",
      "    // new(n: usize) -> Self",
      "    // add_edge(&self, from: usize, to: usize)",
      "    // scc(&self) -> Vec<Vec<usize>>",
      "    Segtree,",
      "};",
      "",
      "#[allow(unused_imports)]",
      "use num::{BigInt, Zero};",
      "",
      "#[allow(unused_imports)]",
      "use std::io::{self, BufReader, StdinLock, Write};",
      "",
      "#[allow(unused_imports)]",
      "use rand::{prelude::*, rngs::StdRng, seq::SliceRandom, thread_rng, Rng, SeedableRng};",
      "#[allow(unused_imports)]",
      "use rand_distr::{Distribution, Normal};",
      "#[allow(unused_imports)]",
      "use std::time::{Duration, Instant};",
      "",
      "fn main() {",
      "    $0",
      "}"
    ],
    "description": "AtCoder Rust prelude",
    "scope": "rust"
  }
}
